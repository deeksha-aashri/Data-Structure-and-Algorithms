                  Question : Print Decreasing


1. You are given a positive number n. 
2. You are required to print the counting from n to 1.
3. You are required to not use any loops. Complete the body of print Decreasing function to achieve it.

Note -> The online judge can't force you to write the function recursively but that is what the spirit of question is. Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn=new Scanner(System.in);
        int n=scn.nextInt();
        printDecreasing(n);
    }

    public static void printDecreasing(int n){
        if(n==0){
            return;
        }
        System.out.println(n);
        printDecreasing(n-1);
        
    }

}




          Question Print Increasing
          Easy
          
          1. You are given a positive number n. 
          2. You are required to print the counting from 1 to n.
          3. You are required to not use any loops. Complete the body of print Increasing function to achieve it. Don't change the signature of the function.
          
          Note -> The online judge can't force you to write the function recursively but that is what the spirit of question is. Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.
          
          Constraints
          1 <= n <= 1000




          import java.util.*;

          public class Main {
          
              public static void main(String[] args) throws Exception {
                  // write your code here
                  Scanner scn = new Scanner(System.in);
                  int n=scn.nextInt();
                  printIncreasing(n);
              }
          
              public static void printIncreasing(int n){
                  
                  if(n==0){
                      return;
                  }
                  printIncreasing(n-1);
                  System.out.println(n);
          
          
                  
              }
          
          }
          
          
                 


          Question Print Increasing Decreasing
          Easy
          
          1. You are given a positive number n. 
          2. You are required to print the counting from n to 1 and back to n again.
          3. You are required to not use any loops. Complete the body of pdi function to achieve it. Don't change the signature of the function.
          
          Note -> The online judge can't force you to write the function recursively but that is what the spirit of question is.Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.
          
          Constraints
          1 <= n <= 1000

    
          import java.io.*;
          import java.util.*;
          
          public class Main {
          
              public static void main(String[] args) throws Exception {
                  // write your code here
                  Scanner scn = new Scanner(System.in);
                  int n=scn.nextInt();
                      pdi(n);
                      }
          
              public static void pdi(int n){
                  if( n==0){
                      return;
                  }
                  System.out.println(n);
                  pdi(n-1);
                  System.out.println(n);
                  
              }
          
          }





          Question  Factorial
          Easy
          
          1. You are given a number n.
          2. You are required to calculate the factorial of the number. Don't change the signature of factorial function.
          
          Note -> The online judge can't force you to write the function recursively but that is what the spirit of question is.Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.
          
          Constraints

          0 <= n <= 10

          import java.io.*;
          import java.util.*;
          
          public class Main {
          
              public static void main(String[] args) throws Exception {
                  // write your code here
                  Scanner scn=new Scanner (System.in);
                  int n=scn.nextInt();
                  factorial(n);
                  System.out.print(factorial(n));
              }
          
              public static int factorial(int n){
                  if(n==0){
                      return 1;
                  }
                  int fac=factorial(n-1);
                  int ans=fac*n;
                  return ans;
              }
          
          }

      

          Question Power-linear
          Easy
          
          1. You are given a number x.
          2. You are given another number n.
          3. You are required to calculate x raised to the power n. Don't change the signature of power function .
          
          Note -> The online judge can't force you to write the function recursively but that is what the spirit of question is. Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.
          
          Constraints
          1 <= x <= 10
          0 <= n <= 9

          import java.io.*;
          import java.util.*;
          
          public class Main {
          
              public static void main(String[] args) throws Exception {
                  // write your code here
                  Scanner scn=new Scanner(System.in);
                  int x=scn.nextInt();
                  int n=scn.nextInt();
                  int  finalans=power(x,n);
                  System.out.print(finalans);
          
              }
          
              public static int power(int x, int n){
                  if(n==0){
                      return 1;
                  }
                  int ans= power(x,n-1);
                  int res= x*ans;
                  return res;
              }
          
          }




          Question  Power-logarithmic
          Easy
          
          1. You are given a number x.
          2. You are given another number n.
          3. You are required to calculate x raised to the power n. Don't change the signature of power function.
          
          Note1 -> The previous version expects the call stack to be of n height. This function expects call function to be only log(n) high.
          
          Note2 -> The online judge can't force you to write the function recursively but that is what the spirit of question is. Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.
          
          Constraints
          1 <= x <= 10
          0 <= n <= 9
          
          import java.io.*;
          import java.util.*;
          
          public class Main {
          
              public static void main(String[] args) throws Exception {
                  // write your code here
                  Scanner scn=new Scanner(System.in);
                  int x=scn.nextInt();
                  int n=scn.nextInt();
                  int val=power(x,n);
                  System.out.println(val);
              }
          
              public static int power(int x, int n){
                   if(n==0){
                       return 1;
                   }
                   int xnpby2=power(x,n/2);
                   int ans=xnpby2*xnpby2;
                   if(n%2!=0){
                       ans*=x;
                   }
                  return ans;
              }
          
          }          
